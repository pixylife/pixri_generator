{{define "UI-List-View"}}
import 'package:flutter/material.dart';
{{- range $v := .imports}}
import 'package:{{$v}}';
{{- end}}

class {{.class}} extends StatefulWidget {
  @override
  _{{.class}}State createState() => _{{.class}}State();
}

class _{{.class}}State extends State<{{.class}}> {
  BuildContext context;
  {{.class_api}} apiService;

  @override
  void initState() {
    super.initState();
    apiService = {{.class_api}}();
  }

  @override
  Widget build(BuildContext context) {
    this.context = context;
    return SafeArea(
      child: FutureBuilder(
        future: apiService.getListOf{{.model.Name}}(),
        builder: (BuildContext context, AsyncSnapshot<List<{{.model.Name}}>> snapshot) {
          if (snapshot.hasError) {
            return Center(
              child: Text(
                  "Something wrong with message: ${snapshot.error.toString()}"),
            );
          } else if (snapshot.connectionState == ConnectionState.done) {
            List<{{.model.Name}}> {{(first_letter_to_lower .model.Name)}}List = snapshot.data;
            return _buildListView({{(first_letter_to_lower .model.Name)}}List);
          } else {
            return Center(
              child: CircularProgressIndicator(),
            );
          }
        },
      ),
    );
  }

  Widget _buildListView(List<{{.model.Name}}> {{(first_letter_to_lower .model.Name)}}List) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0, horizontal: 16.0),
      child: ListView.builder(
        itemBuilder: (context, index) {
          {{.model.Name}} {{(first_letter_to_lower .model.Name)}} = {{(first_letter_to_lower .model.Name)}}List[index];
          return Padding(
            padding: const EdgeInsets.only(top: 8.0),
            child: Card(
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: <Widget>[
                    {{- range $v := .model.Fields}}
                         Text({{(first_letter_to_lower $.model.Name)}}.{{$v.FieldName}}.toString()),
                    {{- end}}
                    Row(
                      mainAxisAlignment: MainAxisAlignment.end,
                      children: <Widget>[
                        FlatButton(
                          onPressed: () {
                            showDialog(
                                context: context,
                                builder: (context) {
                                  return AlertDialog(
                                    title: Text("Warning"),
                                    content: Text(
                                        "Are you sure want to delete this"),
                                    actions: <Widget>[
                                      FlatButton(
                                        child: Text("Yes"),
                                        onPressed: () {
                                          Navigator.pop(context);
                                          apiService
                                              .delete{{.model.Name}}({{(first_letter_to_lower .model.Name)}}.id)
                                              .then((isSuccess) {
                                            if (isSuccess) {
                                              setState(() {});
                                              Scaffold.of(this.context)
                                                  .showSnackBar(SnackBar(
                                                      content: Text(
                                                          "Delete data success")));
                                            } else {
                                              Scaffold.of(this.context)
                                                  .showSnackBar(SnackBar(
                                                      content: Text(
                                                          "Delete data failed")));
                                            }
                                          });
                                        },
                                      ),
                                      FlatButton(
                                        child: Text("No"),
                                        onPressed: () {
                                          Navigator.pop(context);
                                        },
                                      )
                                    ],
                                  );
                                });
                          },
                          child: Text(
                            "Delete",
                            style: TextStyle(color: Colors.red),
                          ),
                        ),
                        FlatButton(
                          onPressed: () {
                            Navigator.push(context,
                                MaterialPageRoute(builder: (context) {
                              return {{.form_ui}}({{(first_letter_to_lower .model.Name)}}: {{(first_letter_to_lower .model.Name)}});
                            }));
                          },
                          child: Text(
                            "Edit",
                            style: TextStyle(color: Colors.blue),
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
            ),
          );
        },
        itemCount: {{(first_letter_to_lower .model.Name)}}List.length,
      ),
    );
  }
}
{{end}}